{
  "version": 3,
  "sources": ["../src/index.ts", "../src/core/bot.ts", "../src/core/util/Error.ts", "../src/core/util/readDir.ts"],
  "sourcesContent": ["import { config } from \"dotenv\";\nimport { Bot } from \"@core/bot\";\n\nswitch (process.env[\"NODE_ENV\"]) {\n  case \"PRODUCTION\":\n    config();\n    break;\n  case \"DEV\":\n    config({\n      path: \"local.env\",\n    });\n    break;\n}\n\nconst bot = new Bot({\n  commandsDir: \"commands\",\n});\n\nbot.login(process.env[\"TOKEN\"]!);\n", "import { PrismaClient } from \"@prisma/client\";\nimport { join } from \"path\";\nimport { Client } from \"discord.js\";\nimport { RubyError } from \"./util/Error\";\nimport { readDir } from \"./util/readDir\";\n\ninterface IConfig {\n  commandsDir: string;\n  owners?: string[];\n  testServers?: string[];\n  globalTesting?: boolean;\n  prefix?: string[];\n}\n\nexport class Bot {\n  public client: Client = new Client({\n    intents: [\"GUILDS\", \"GUILD_MESSAGES\", \"GUILD_MEMBERS\"],\n  });\n\n  public commandsDir: string;\n\n  public prisma: PrismaClient = new PrismaClient();\n\n  public isDev: () => boolean = () => process.env[\"NODE_ENV\"] === \"DEVELOPMENT\";\n\n  constructor(config: IConfig) {\n    this.client.on(\"ready\", () => {\n      console.log(`Logged in as ${this.client.user!.tag}`);\n\n      this.client.user!.setPresence({ activities: [{ name: \"I'm alive!\" }] });\n    });\n\n    this.commandsDir = config.commandsDir;\n\n    if (require.main) {\n      const { path } = require.main;\n\n      if (path) {\n        this.commandsDir = join(path, this.commandsDir);\n      }\n    }\n\n    const commandFiles = readDir(this.commandsDir, { ignoreDot: true });\n  }\n\n  public login(token: string) {\n    if (!token) throw new RubyError(\"No token provided\");\n\n    this.client.login(token).catch(() => {\n      throw new RubyError(\"Invalid token\");\n    });\n  }\n}\n", "export class RubyError extends Error {\n  constructor(...message: any[]) {\n    super(...message);\n\n    this.name = `RUBY:ERROR`;\n  }\n}\n", "import { join } from \"path\";\nimport { readdirSync } from \"fs\";\n\ninterface IReadDirConfig {\n  ignoreDot: boolean;\n}\n\nexport const readDir = (path: string, config: IReadDirConfig) => {\n  const files = readdirSync(path, { withFileTypes: true }).filter(\n    (x) => config.ignoreDot && !x.name.startsWith(\".\")\n  );\n  let matches: string[] = [];\n\n  for (const file of files) {\n    if (file.isDirectory()) {\n      matches = [...matches, ...readDir(join(path, file.name), config)];\n    } else {\n      matches.push(join(path, file.name));\n    }\n  }\n\n  return matches;\n};\n"],
  "mappings": "+EAAA,MAAuB,kBCAvB,MAA6B,0BAC7B,EAAqB,gBACrB,EAAuB,sBCFhB,mBAAwB,MAAM,CACnC,eAAe,EAAgB,CAC7B,MAAM,GAAG,GAET,KAAK,KAAO,eAJT,iBCAP,MAAqB,gBACrB,EAA4B,cAMf,EAAU,GAAC,EAAc,IAA2B,CAC/D,GAAM,GAAQ,kBAAY,EAAM,CAAE,cAAe,KAAQ,OACvD,AAAC,GAAM,EAAO,WAAa,CAAC,EAAE,KAAK,WAAW,MAE5C,EAAoB,GAExB,OAAW,KAAQ,GACjB,AAAI,EAAK,cACP,EAAU,CAAC,GAAG,EAAS,GAAG,EAAQ,WAAK,EAAM,EAAK,MAAO,IAEzD,EAAQ,KAAK,WAAK,EAAM,EAAK,OAIjC,MAAO,IAdc,WFOhB,WAAU,CAWf,YAAY,EAAiB,CAVtB,YAAiB,GAAI,UAAO,CACjC,QAAS,CAAC,SAAU,iBAAkB,mBAKjC,YAAuB,GAAI,gBAE3B,WAAuB,MAAM,QAAQ,IAAI,WAAgB,cAAlC,SAW5B,GARA,KAAK,OAAO,GAAG,QAAS,IAAM,CAC5B,QAAQ,IAAI,gBAAgB,KAAK,OAAO,KAAM,OAE9C,KAAK,OAAO,KAAM,YAAY,CAAE,WAAY,CAAC,CAAE,KAAM,mBAGvD,KAAK,YAAc,EAAO,YAEtB,QAAQ,KAAM,CAChB,GAAM,CAAE,QAAS,QAAQ,KAEzB,AAAI,GACF,MAAK,YAAc,WAAK,EAAM,KAAK,cAIvC,GAAM,GAAe,EAAQ,KAAK,YAAa,CAAE,UAAW,KAGvD,MAAM,EAAe,CAC1B,GAAI,CAAC,EAAO,KAAM,IAAI,GAAU,qBAEhC,KAAK,OAAO,MAAM,GAAO,MAAM,IAAM,CACnC,KAAM,IAAI,GAAU,qBAnCnB,WDXP,OAAQ,QAAQ,IAAI,cACb,aACH,eACA,UACG,MACH,aAAO,CACL,KAAM,cAER,MAGJ,GAAM,GAAM,GAAI,GAAI,CAClB,YAAa,aAGf,EAAI,MAAM,QAAQ,IAAI",
  "names": []
}
