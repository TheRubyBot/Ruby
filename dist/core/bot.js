var D=Object.create;var c=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var h=e=>c(e,"__esModule",{value:!0});var I=(e,i)=>{for(var t in i)c(e,t,{get:i[t],enumerable:!0})},o=(e,i,t,r)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of y(i))!E.call(e,n)&&(t||n!=="default")&&c(e,n,{get:()=>i[n],enumerable:!(r=S(i,n))||r.enumerable});return e},p=(e,i)=>o(h(c(e!=null?D(u(e)):{},"default",!i&&e&&e.__esModule?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e),P=(e=>(i,t)=>e&&e.get(i)||(t=o(h({}),i,1),e&&e.set(i,t),t))(typeof WeakMap!="undefined"?new WeakMap:0);var g=(e,i,t)=>new Promise((r,n)=>{var a=s=>{try{m(t.next(s))}catch($){n($)}},C=s=>{try{m(t.throw(s))}catch($){n($)}},m=s=>s.done?r(s.value):Promise.resolve(s.value).then(a,C);m((t=t.apply(e,i)).next())});var l={};I(l,{Bot:()=>M});var v=require("discord.js"),d=p(require("ora")),f=require("@prisma/client"),w=p(require("./util/getVersion"));o(l,require("./constructors/ApplicationCommandConstructor"));class M{constructor({commandsDir:i,eventsDir:t,owners:r,devMode:n}){this.version=(0,w.default)();this.$commandsDir="./commands";this.$eventsDir="./events";this.$owners=[];this.$devMode=!1;this.clientSpinner=(0,d.default)("Starting client...").start();this.prismaSpinner=(0,d.default)("Starting prisma...").start();this.$client=new v.Client({intents:["GUILD_MESSAGES","GUILD_MEMBERS","GUILD_PRESENCES","GUILDS"]}),this.$client.on("ready",()=>g(this,null,function*(){this.clientSpinner.succeed(`Logged in as ${this.$client.user.tag}`),this.$client.user.setPresence({activities:[{name:`Using version ${this.version.string}`}]}),yield this.$client.application.fetch(),this.$owners.push(this.$client.application.owner.id)})),this.$commandsDir=i||this.$commandsDir,this.$eventsDir=t||this.$eventsDir,this.$devMode=n||this.$devMode;for(const a of r)this.$client.users.fetch(a).catch(()=>{throw new Error(`Owner ${a} does not exist.`)}),this.$owners.push(a);this.$prisma=new f.PrismaClient,this.$prisma.$connect().then(()=>this.prismaSpinner.succeed("Prisma ready"))}login(i){return new Promise((t,r)=>{this.$client.login(i).catch(r),t(this.$client)})}get client(){return this.$client}get prisma(){return this.$prisma}}module.exports=P(l);0&&(module.exports={Bot});
//# sourceMappingURL=bot.js.map
