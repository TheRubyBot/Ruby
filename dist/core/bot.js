var u=Object.create;var c=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var p=i=>c(i,"__esModule",{value:!0});var P=(i,e)=>{for(var t in e)c(i,t,{get:e[t],enumerable:!0})},a=(i,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of y(e))!I.call(i,r)&&(t||r!=="default")&&c(i,r,{get:()=>e[r],enumerable:!(s=S(e,r))||s.enumerable});return i},g=(i,e)=>a(p(c(i!=null?u(E(i)):{},"default",!e&&i&&i.__esModule?{get:()=>i.default,enumerable:!0}:{value:i,enumerable:!0})),i),M=(i=>(e,t)=>i&&i.get(e)||(t=a(p({}),e,1),i&&i.set(e,t),t))(typeof WeakMap!="undefined"?new WeakMap:0);var v=(i,e,t)=>new Promise((s,r)=>{var n=o=>{try{l(t.next(o))}catch($){r($)}},C=o=>{try{l(t.throw(o))}catch($){r($)}},l=o=>o.done?s(o.value):Promise.resolve(o.value).then(n,C);l((t=t.apply(i,e)).next())});var m={};P(m,{Bot:()=>B});var D=require("discord.js"),h=g(require("ora")),f=require("@prisma/client"),w=g(require("./util/getVersion")),d=require("path");a(m,require("./constructors/ApplicationCommandConstructor"));class B{constructor({commandsDir:e,eventsDir:t,owners:s,devMode:r}){this.version=(0,w.default)();this.$commandsDir="./commands";this.$eventsDir="./events";this.$owners=[];this.$devMode=!1;this.clientSpinner=(0,h.default)("Starting client...").start();this.prismaSpinner=(0,h.default)("Starting prisma...").start();if(this.$client=new D.Client({intents:["GUILD_MESSAGES","GUILD_MEMBERS","GUILD_PRESENCES","GUILDS"]}),this.$client.on("ready",()=>v(this,null,function*(){this.clientSpinner.succeed(`Logged in as ${this.$client.user.tag}`),this.$client.user.setPresence({activities:[{name:`Using version ${this.version.string}`}]}),yield this.$client.application.fetch(),this.$owners.push(this.$client.application.owner.id)})),this.$commandsDir=e||this.$commandsDir,this.$eventsDir=t||this.$eventsDir,this.$devMode=r||this.$devMode,require.main){const{path:n}=require.main;n&&(this.$commandsDir=(0,d.join)(n,this.$commandsDir),this.$eventsDir=(0,d.join)(n,this.$eventsDir))}for(const n of s)this.$client.users.fetch(n).catch(()=>{throw new Error(`Owner ${n} does not exist.`)}),this.$owners.push(n);this.$prisma=new f.PrismaClient,this.$prisma.$connect().then(()=>this.prismaSpinner.succeed("Prisma ready"))}login(e){return new Promise((t,s)=>{this.$client.login(e).catch(s),t(this.$client)})}get client(){return this.$client}get prisma(){return this.$prisma}}module.exports=M(m);0&&(module.exports={Bot});
//# sourceMappingURL=bot.js.map
