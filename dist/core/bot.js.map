{
  "version": 3,
  "sources": ["../../src/core/bot.ts"],
  "sourcesContent": ["import { Client } from \"discord.js\";\nimport ora, { Ora } from \"ora\";\nimport { PrismaClient } from \"@prisma/client\";\nimport getVersion, { IVersion } from \"./util/getVersion\";\nimport { join } from \"path\";\nimport { readDir } from \"./util/readDir\";\nimport { ApplicationCommandHandler } from \"./handlers/ApplicationCommandHandler\";\n\nexport class Bot implements IBot {\n  $client;\n  $prisma;\n  version = getVersion();\n\n  // Config\n  $commandsDir = \"./commands\";\n  $eventsDir = \"./events\";\n  $owners: string[] = [];\n  $devMode = false;\n\n  // Handlers\n  private readonly ApplicationCommands: ApplicationCommandHandler;\n\n  private readonly spinners: Record<string, Ora> = {\n    client: ora(\"Starting client...\").start(),\n    prisma: ora(\"Starting prisma...\").start(),\n    commands: ora(\"Loading commands...\"),\n    events: ora(\"Loading events...\")\n  };\n  constructor({ commandsDir, eventsDir, owners, devMode }: IBotConfig) {\n    this.$client = new Client({\n      intents: [\"GUILD_MESSAGES\", \"GUILD_MEMBERS\", \"GUILD_PRESENCES\", \"GUILDS\"]\n    });\n\n    this.$prisma = new PrismaClient();\n    this.$prisma.$connect().then(() => this.spinners.prisma.succeed(\"Prisma ready\"));\n\n    this.$client.on(\"ready\", async () => {\n      this.setPresence();\n      this.spinners.client.succeed(`Logged in as ${this.$client.user!.tag}`);\n\n      await this.$client.application!.fetch();\n      this.$owners.push(this.$client.application!.owner!.id);\n    });\n\n    this.$commandsDir = commandsDir || this.$commandsDir;\n    this.$eventsDir = eventsDir || this.$eventsDir;\n    this.correctPaths();\n    this.$devMode = devMode || this.$devMode;\n    this.verifyOwners(owners);\n\n    this.spinners.commands.start();\n    const commands = readDir(this.$commandsDir);\n    this.ApplicationCommands = new ApplicationCommandHandler(this.spinners, commands);\n    this.spinners.commands.succeed(`Loaded ${this.ApplicationCommands.commands.size} commands`);\n  }\n  private setPresence(): void {\n    this.$client.user!.setPresence({\n      activities: [\n        {\n          name: `Using version ${this.version.string}`\n        }\n      ]\n    });\n  }\n  private correctPaths(): void {\n    let path;\n    if (require.main && (path = require.main.path)) {\n      this.$commandsDir = join(path, this.$commandsDir);\n      this.$eventsDir = join(path, this.$eventsDir);\n    }\n  }\n  private verifyOwners(owners: string[]): void {\n    for (const owner of owners) {\n      this.$client.users.fetch(owner).catch(() => {\n        throw new Error(`Owner ${owner} does not exist.`);\n      });\n      this.$owners.push(owner);\n    }\n  }\n  login(token: string): Promise<Client | Error> {\n    return new Promise<Client | Error>((resolve, reject) => {\n      this.$client.login(token).catch(reject);\n      resolve(this.$client);\n    });\n  }\n  get client(): Client {\n    return this.$client;\n  }\n  get prisma(): PrismaClient {\n    return this.$prisma;\n  }\n}\n\ninterface IBot {\n  readonly $client: Client;\n  readonly $prisma: PrismaClient;\n  readonly version: IVersion;\n\n  // Config\n  readonly $commandsDir: string;\n  readonly $eventsDir: string;\n  // Readonly $prefixes: string[];\n  readonly $owners: string[];\n  readonly $devMode: boolean;\n\n  // Methods\n  login(token: string): Promise<Client | Error>;\n  get client(): Client;\n  get prisma(): PrismaClient;\n}\n\ninterface IBotConfig {\n  commandsDir: string;\n  eventsDir: string;\n  owners: string[];\n  devMode: boolean;\n}\n\nexport * from \"./constructors/ApplicationCommandConstructor\";\nexport * from \"./constructors/OptionBuilder\";\n"],
  "mappings": "k4BAAA,gCAAuB,sBACvB,EAAyB,kBACzB,EAA6B,0BAC7B,EAAqC,gCACrC,EAAqB,gBACrB,EAAwB,0BACxB,EAA0C,gDAgH1C,IAAc,yDACd,IAAc,yCA/GP,MAAM,CAAoB,CAoB/B,YAAY,CAAE,cAAa,YAAW,SAAQ,WAAuB,CAjBrE,aAAU,cAAW,EAGrB,kBAAe,aACf,gBAAa,WACb,aAAoB,CAAC,EACrB,cAAW,GAKM,cAAgC,CAC/C,OAAQ,cAAI,oBAAoB,EAAE,MAAM,EACxC,OAAQ,cAAI,oBAAoB,EAAE,MAAM,EACxC,SAAU,cAAI,qBAAqB,EACnC,OAAQ,cAAI,mBAAmB,CACjC,EAEE,KAAK,QAAU,GAAI,UAAO,CACxB,QAAS,CAAC,iBAAkB,gBAAiB,kBAAmB,QAAQ,CAC1E,CAAC,EAED,KAAK,QAAU,GAAI,gBACnB,KAAK,QAAQ,SAAS,EAAE,KAAK,IAAM,KAAK,SAAS,OAAO,QAAQ,cAAc,CAAC,EAE/E,KAAK,QAAQ,GAAG,QAAS,IAAY,wBACnC,KAAK,YAAY,EACjB,KAAK,SAAS,OAAO,QAAQ,gBAAgB,KAAK,QAAQ,KAAM,KAAK,EAErE,KAAM,MAAK,QAAQ,YAAa,MAAM,EACtC,KAAK,QAAQ,KAAK,KAAK,QAAQ,YAAa,MAAO,EAAE,CACvD,EAAC,EAED,KAAK,aAAe,GAAe,KAAK,aACxC,KAAK,WAAa,GAAa,KAAK,WACpC,KAAK,aAAa,EAClB,KAAK,SAAW,GAAW,KAAK,SAChC,KAAK,aAAa,CAAM,EAExB,KAAK,SAAS,SAAS,MAAM,EAC7B,KAAM,GAAW,cAAQ,KAAK,YAAY,EAC1C,KAAK,oBAAsB,GAAI,6BAA0B,KAAK,SAAU,CAAQ,EAChF,KAAK,SAAS,SAAS,QAAQ,UAAU,KAAK,oBAAoB,SAAS,eAAe,CAC5F,CACQ,aAAoB,CAC1B,KAAK,QAAQ,KAAM,YAAY,CAC7B,WAAY,CACV,CACE,KAAM,iBAAiB,KAAK,QAAQ,QACtC,CACF,CACF,CAAC,CACH,CACQ,cAAqB,CAC3B,GAAI,GACJ,AAAI,QAAQ,MAAS,GAAO,QAAQ,KAAK,OACvC,MAAK,aAAe,WAAK,EAAM,KAAK,YAAY,EAChD,KAAK,WAAa,WAAK,EAAM,KAAK,UAAU,EAEhD,CACQ,aAAa,EAAwB,CAC3C,SAAW,KAAS,GAClB,KAAK,QAAQ,MAAM,MAAM,CAAK,EAAE,MAAM,IAAM,CAC1C,KAAM,IAAI,OAAM,SAAS,mBAAuB,CAClD,CAAC,EACD,KAAK,QAAQ,KAAK,CAAK,CAE3B,CACA,MAAM,EAAwC,CAC5C,MAAO,IAAI,SAAwB,CAAC,EAAS,IAAW,CACtD,KAAK,QAAQ,MAAM,CAAK,EAAE,MAAM,CAAM,EACtC,EAAQ,KAAK,OAAO,CACtB,CAAC,CACH,IACI,SAAiB,CACnB,MAAO,MAAK,OACd,IACI,SAAuB,CACzB,MAAO,MAAK,OACd,CACF",
  "names": []
}
