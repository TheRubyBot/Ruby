{
  "version": 3,
  "sources": ["../../src/core/bot.ts"],
  "sourcesContent": ["import { PrismaClient } from \"@prisma/client\";\nimport { Client } from \"discord.js\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\nimport { ApplciationCommandHandler } from \"./handlers/ApplicationCommandHandler\";\nimport { TextCommandHandler } from \"./handlers/TextCommandHandler\";\nimport { readDir } from \"./util/readDir\";\n\ninterface IBotConfig {\n  commandsDir: string;\n  owners: string[];\n  testServers: string[];\n  prefixes: string[];\n}\n\nexport class Bot {\n  // Clients\n  public client: Client = new Client({\n    intents: [\"GUILDS\", \"GUILD_MESSAGES\", \"GUILD_MEMBERS\"]\n  });\n  public prisma: PrismaClient = new PrismaClient();\n\n  public version: { number: string; revision: number; codename: string };\n\n  // Discord Configs\n  public commandsDir = \"commands\";\n  public owners: string[] = [];\n  public testServers: string[] = [];\n  public prefixes: string[] = [];\n\n  // Handlers\n  private readonly $applicationCommandHandler: ApplciationCommandHandler;\n  // Private readonly $eventHandler: EventHandler;\n  // Private readonly $textCommandHandler: TextCommandHandler;\n\n  constructor(config: IBotConfig) {\n    this.client.on(\"ready\", () => {\n      console.log(`Logged in as ${this.client.user?.tag}`);\n\n      this.prefixes.push(`<@${this.client.user?.id}>`);\n      this.prefixes.push(`<@!${this.client.user?.id}>`);\n    });\n\n    const pjson = JSON.parse(readFileSync(\"./package.json\", \"utf8\"));\n    this.version = {\n      number: pjson.version,\n      revision: pjson.revision,\n      codename: pjson.codename\n    };\n\n    const { commandsDir, owners, prefixes, testServers } = config;\n\n    this.commandsDir = commandsDir;\n    this.prefixes = prefixes;\n\n    for (const owner of owners)\n      this.client.users.fetch(owner).catch(() => {\n        throw new Error(`Owner: ${owner} cannot be seen by bot`);\n      });\n\n    for (const testServer of testServers)\n      this.client.guilds.fetch(testServer).catch(() => {\n        throw new Error(`Test server: ${testServer} cannot be seen by bot`);\n      });\n\n    if (require.main) {\n      const { path } = require.main;\n\n      if (path) this.commandsDir = join(path, this.commandsDir);\n    }\n\n    const commandFiles = readDir(this.commandsDir, { ignoreDot: true });\n\n    this.$applicationCommandHandler = new ApplciationCommandHandler(commandFiles);\n  }\n\n  public login(token: string): void {\n    this.client.login(token);\n  }\n}\n"],
  "mappings": "8gBAAA,gCAA6B,0BAC7B,EAAuB,sBACvB,EAA6B,cAC7B,EAAqB,gBACrB,EAA0C,gDAE1C,EAAwB,0BASjB,OAAU,CAoBf,YAAY,EAAoB,CAlBzB,YAAiB,GAAI,UAAO,CACjC,QAAS,CAAC,SAAU,iBAAkB,mBAEjC,YAAuB,GAAI,gBAK3B,iBAAc,WACd,YAAmB,GACnB,iBAAwB,GACxB,cAAqB,GAQ1B,KAAK,OAAO,GAAG,QAAS,IAAM,CApClC,UAqCM,QAAQ,IAAI,gBAAgB,QAAK,OAAO,OAAZ,cAAkB,OAE9C,KAAK,SAAS,KAAK,KAAK,QAAK,OAAO,OAAZ,cAAkB,OAC1C,KAAK,SAAS,KAAK,MAAM,QAAK,OAAO,OAAZ,cAAkB,SAG7C,KAAM,GAAQ,KAAK,MAAM,mBAAa,iBAAkB,SACxD,KAAK,QAAU,CACb,OAAQ,EAAM,QACd,SAAU,EAAM,SAChB,SAAU,EAAM,UAGlB,KAAM,CAAE,cAAa,SAAQ,WAAU,eAAgB,EAEvD,KAAK,YAAc,EACnB,KAAK,SAAW,EAEhB,SAAW,KAAS,GAClB,KAAK,OAAO,MAAM,MAAM,GAAO,MAAM,IAAM,CACzC,KAAM,IAAI,OAAM,UAAU,6BAG9B,SAAW,KAAc,GACvB,KAAK,OAAO,OAAO,MAAM,GAAY,MAAM,IAAM,CAC/C,KAAM,IAAI,OAAM,gBAAgB,6BAGpC,GAAI,QAAQ,KAAM,CAChB,KAAM,CAAE,QAAS,QAAQ,KAEzB,AAAI,GAAM,MAAK,YAAc,WAAK,EAAM,KAAK,cAG/C,KAAM,GAAe,cAAQ,KAAK,YAAa,CAAE,UAAW,KAE5D,KAAK,2BAA6B,GAAI,6BAA0B,GAG3D,MAAM,EAAqB,CAChC,KAAK,OAAO,MAAM",
  "names": []
}
