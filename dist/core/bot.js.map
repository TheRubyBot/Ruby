{
  "version": 3,
  "sources": ["../../src/core/bot.ts"],
  "sourcesContent": ["import { Client } from \"discord.js\";\nimport ora, { Ora } from \"ora\";\nimport { PrismaClient } from \"@prisma/client\";\nimport getVersion, { IVersion } from \"./util/getVersion\";\n\nexport class Bot implements IBot {\n  $client;\n  $prisma;\n  version = getVersion();\n\n  // Config\n  $commandsDir = \"./commands\";\n  $eventsDir = \"./events\";\n  $owners: string[] = [];\n  $devMode = false;\n\n  private readonly clientSpinner: Ora = ora(\"Starting client...\").start();\n  private readonly prismaSpinner: Ora = ora(\"Starting prisma...\").start();\n\n  constructor({ commandsDir, eventsDir, owners, devMode }: IBotConfig) {\n    this.$client = new Client({\n      intents: [\"GUILD_MESSAGES\", \"GUILD_MEMBERS\", \"GUILD_PRESENCES\", \"GUILDS\"]\n    });\n\n    this.$client.on(\"ready\", async () => {\n      this.clientSpinner.succeed(`Logged in as ${this.$client.user!.tag}`);\n\n      this.$client.user!.setPresence({\n        activities: [\n          {\n            name: `Using version ${this.version.string}`\n          }\n        ]\n      });\n\n      await this.$client.application!.fetch();\n      this.$owners.push(this.$client.application!.owner!.id);\n    });\n\n    this.$commandsDir = commandsDir || this.$commandsDir;\n    this.$eventsDir = eventsDir || this.$eventsDir;\n    this.$devMode = devMode || this.$devMode;\n\n    // Iterate through the owners array, fetch them and if they don't extst throw an error.\n    for (const owner of owners) {\n      this.$client.users.fetch(owner).catch(() => {\n        throw new Error(`Owner ${owner} does not exist.`);\n      });\n      this.$owners.push(owner);\n    }\n\n    this.$prisma = new PrismaClient();\n\n    this.$prisma.$connect().then(() => this.prismaSpinner.succeed(\"Prisma ready\"));\n  }\n\n  login(token: string): Promise<Client | Error> {\n    return new Promise<Client | Error>((resolve, reject) => {\n      this.$client.login(token).catch(reject);\n      resolve(this.$client);\n    });\n  }\n\n  get client(): Client {\n    return this.$client;\n  }\n\n  get prisma(): PrismaClient {\n    return this.$prisma;\n  }\n}\n\nexport * from \"./constructors/ApplicationCommandConstructor\";\n\ninterface IBot {\n  readonly $client: Client;\n  readonly $prisma: PrismaClient;\n  readonly version: IVersion;\n\n  // Config\n  readonly $commandsDir: string;\n  readonly $eventsDir: string;\n  // Readonly $prefixes: string[];\n  readonly $owners: string[];\n  readonly $devMode: boolean;\n\n  // Methods\n  login(token: string): Promise<Client | Error>;\n  get client(): Client;\n  get prisma(): PrismaClient;\n}\n\ninterface IBotConfig {\n  commandsDir: string;\n  eventsDir: string;\n  owners: string[];\n  devMode: boolean;\n}\n"],
  "mappings": "k4BAAA,gCAAuB,sBACvB,EAAyB,kBACzB,EAA6B,0BAC7B,EAAqC,gCAqErC,IAAc,yDAnEP,MAAM,CAAoB,CAc/B,YAAY,CAAE,cAAa,YAAW,SAAQ,WAAuB,CAXrE,aAAU,cAAW,EAGrB,kBAAe,aACf,gBAAa,WACb,aAAoB,CAAC,EACrB,cAAW,GAEM,mBAAqB,cAAI,oBAAoB,EAAE,MAAM,EACrD,mBAAqB,cAAI,oBAAoB,EAAE,MAAM,EAGpE,KAAK,QAAU,GAAI,UAAO,CACxB,QAAS,CAAC,iBAAkB,gBAAiB,kBAAmB,QAAQ,CAC1E,CAAC,EAED,KAAK,QAAQ,GAAG,QAAS,IAAY,wBACnC,KAAK,cAAc,QAAQ,gBAAgB,KAAK,QAAQ,KAAM,KAAK,EAEnE,KAAK,QAAQ,KAAM,YAAY,CAC7B,WAAY,CACV,CACE,KAAM,iBAAiB,KAAK,QAAQ,QACtC,CACF,CACF,CAAC,EAED,KAAM,MAAK,QAAQ,YAAa,MAAM,EACtC,KAAK,QAAQ,KAAK,KAAK,QAAQ,YAAa,MAAO,EAAE,CACvD,EAAC,EAED,KAAK,aAAe,GAAe,KAAK,aACxC,KAAK,WAAa,GAAa,KAAK,WACpC,KAAK,SAAW,GAAW,KAAK,SAGhC,SAAW,KAAS,GAClB,KAAK,QAAQ,MAAM,MAAM,CAAK,EAAE,MAAM,IAAM,CAC1C,KAAM,IAAI,OAAM,SAAS,mBAAuB,CAClD,CAAC,EACD,KAAK,QAAQ,KAAK,CAAK,EAGzB,KAAK,QAAU,GAAI,gBAEnB,KAAK,QAAQ,SAAS,EAAE,KAAK,IAAM,KAAK,cAAc,QAAQ,cAAc,CAAC,CAC/E,CAEA,MAAM,EAAwC,CAC5C,MAAO,IAAI,SAAwB,CAAC,EAAS,IAAW,CACtD,KAAK,QAAQ,MAAM,CAAK,EAAE,MAAM,CAAM,EACtC,EAAQ,KAAK,OAAO,CACtB,CAAC,CACH,IAEI,SAAiB,CACnB,MAAO,MAAK,OACd,IAEI,SAAuB,CACzB,MAAO,MAAK,OACd,CACF",
  "names": []
}
