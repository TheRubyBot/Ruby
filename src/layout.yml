core:
  bot.ts:
    - Creates the discord client instance
    - Creates the prisma client
    - Assigns the handlers
  handlers:
    ApplicationCommandHandler.ts:
      - Puts all *application* commands into a Map<string, ApplicaionCommand>
      - Creates the client's InteractionCreate event listener
    TextCommandHandler.ts:
      - Puts all *text* commands into a Map<string, TextCommand>
      - Creates the client's MessageCreate event listener, validating that it is a command etc
    EventHandler.ts:
      - Handles all the events
  constructors:
    BaseCommandConstructor.ts:
      - Basic command functions like isSlash(), isText() etc to be used on ApplicationCommandConstructor and TextCommandConstructor
      - Basic info that is needed by both types of command
    ApplicationCommandConstructor.ts:
      - Handles on-the-spot name, description and option validation before even being registered
      - Proper and strict type checking and stuff
    TextCommandConstructor.ts:
      - Handles on-the-spot type checking
      - Type checking you get the gist of it
    EventHandlerConstructor.ts:
      - Handles on-the-spot type checking
      - Looks better than client.on("name", () => {}) by converting it to new Event("name", () => {})
    OptionBuilderConstructor.ts:
      - Creates options that adhere to discord's option structure
      - Chains the options together with new OptionBuilder().type("", "").type2("", "").etc()
