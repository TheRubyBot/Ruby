env:
  es2021: true

extends:
  - eslint:recommended
  - plugin:@typescript-eslint/recommended
  - prettier
  - plugin:prettier/recommended

parser: "@typescript-eslint/parser"

parserOptions:
  ecmaVersion: latest
  sourceType: module
  project: "./tsconfig.json"
  extraFileExtensions: [".js", ".mjs", ".cjs", ".ts"]

plugins: 
  - "@typescript-eslint"
  - "prettier"

rules:
  # TypeScript rules
  "@typescript-eslint/array-type": [error, { default: "array" }]
  "@typescript-eslint/consistent-indexed-object-style": [error, "record"]
  "@typescript-eslint/consistent-type-exports": error
  "@typescript-eslint/explicit-function-return-type": [error, { allowExpressions: true }]
  "@typescript-eslint/naming-convention": [error, 
    { selector: "default", format: ["camelCase"] },
    { selector: "variable", format: ["camelCase", "UPPER_CASE"] },
    { selector: "typeLike", format: ["PascalCase" ]},
    { selector: "class", format: ["PascalCase" ]}
  ]
  "@typescript-eslint/no-base-to-string": error
  "@typescript-eslint/no-explicit-any": [error, { ignoreRestArgs: true, fixToUnknown: true }]
  "@typescript-eslint/no-extra-non-null-assertion": error
  "@typescript-eslint/no-invalid-void-type": error
  "@typescript-eslint/no-meaningless-void-operator": error
  "@typescript-eslint/no-misused-new": error
  "@typescript-eslint/no-require-imports": error
  "@typescript-eslint/no-unnecessary-condition": error
  "@typescript-eslint/prefer-for-of": warn
  "@typescript-eslint/prefer-readonly": error
  "@typescript-eslint/prefer-string-starts-ends-with": error
  "@typescript-eslint/prefer-ts-expect-error": error
  "@typescript-eslint/semi": [error, "always"]
  '@typescript-eslint/indent': [error, 2, { SwitchCase: 0 }]

  # Built in
  linebreak-style: [error, "unix"]
  quotes: [error, "double"]
  no-constructor-return: error
  no-unreachable-loop: error
  no-unused-private-class-members: error
  arrow-body-style: [error, "as-needed"]
  capitalized-comments: [error, "always"]
  curly: [error, "multi"]
  default-case-last: error
  func-style: [error, "expression", { allowArrowFunctions: true }]
  no-confusing-arrow: error
  no-lonely-if: warn
  no-regex-spaces: warn
  no-var: error
  prefer-const: warn
  comma-dangle: [warn, "never"]
  comma-spacing: [error, { before: false, after: true }]
 
  # Disabled
  '@typescript-eslint/no-non-null-assertion': off
